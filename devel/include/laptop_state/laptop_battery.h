// Generated by gencpp from file laptop_state/laptop_battery.msg
// DO NOT EDIT!


#ifndef LAPTOP_STATE_MESSAGE_LAPTOP_BATTERY_H
#define LAPTOP_STATE_MESSAGE_LAPTOP_BATTERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laptop_state
{
template <class ContainerAllocator>
struct laptop_battery_
{
  typedef laptop_battery_<ContainerAllocator> Type;

  laptop_battery_()
    : battery_level(0)  {
    }
  laptop_battery_(const ContainerAllocator& _alloc)
    : battery_level(0)  {
  (void)_alloc;
    }



   typedef int64_t _battery_level_type;
  _battery_level_type battery_level;





  typedef boost::shared_ptr< ::laptop_state::laptop_battery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laptop_state::laptop_battery_<ContainerAllocator> const> ConstPtr;

}; // struct laptop_battery_

typedef ::laptop_state::laptop_battery_<std::allocator<void> > laptop_battery;

typedef boost::shared_ptr< ::laptop_state::laptop_battery > laptop_batteryPtr;
typedef boost::shared_ptr< ::laptop_state::laptop_battery const> laptop_batteryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laptop_state::laptop_battery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laptop_state::laptop_battery_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::laptop_state::laptop_battery_<ContainerAllocator1> & lhs, const ::laptop_state::laptop_battery_<ContainerAllocator2> & rhs)
{
  return lhs.battery_level == rhs.battery_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::laptop_state::laptop_battery_<ContainerAllocator1> & lhs, const ::laptop_state::laptop_battery_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace laptop_state

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::laptop_state::laptop_battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laptop_state::laptop_battery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laptop_state::laptop_battery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laptop_state::laptop_battery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laptop_state::laptop_battery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laptop_state::laptop_battery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laptop_state::laptop_battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60f5d6110c0b3a3406de83fa39611c2e";
  }

  static const char* value(const ::laptop_state::laptop_battery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60f5d6110c0b3a34ULL;
  static const uint64_t static_value2 = 0x06de83fa39611c2eULL;
};

template<class ContainerAllocator>
struct DataType< ::laptop_state::laptop_battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laptop_state/laptop_battery";
  }

  static const char* value(const ::laptop_state::laptop_battery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laptop_state::laptop_battery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 battery_level\n"
;
  }

  static const char* value(const ::laptop_state::laptop_battery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laptop_state::laptop_battery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct laptop_battery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laptop_state::laptop_battery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laptop_state::laptop_battery_<ContainerAllocator>& v)
  {
    s << indent << "battery_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.battery_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAPTOP_STATE_MESSAGE_LAPTOP_BATTERY_H
